# .github/workflows/release.yml
name: Release

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Find project file
        id: project
        run: |
          # Look for the .csproj file
          if [ -f "PgsToSrt/PgsToSrt.csproj" ]; then
            echo "path=PgsToSrt/PgsToSrt.csproj" >> $GITHUB_OUTPUT
          elif [ -f "src/PgsToSrt/PgsToSrt.csproj" ]; then
            echo "path=src/PgsToSrt/PgsToSrt.csproj" >> $GITHUB_OUTPUT
          else
            echo "Project structure:"
            find . -name "*.csproj" -type f
            echo "Directory contents:"
            ls -la
            exit 1
          fi

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Extract version from tag
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="dev-$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Restore dependencies
        run: dotnet restore ${{ steps.project.outputs.path }}

      - name: Build and publish
        run: |
          dotnet publish ${{ steps.project.outputs.path }} \
            --configuration Release \
            --runtime linux-x64 \
            --self-contained true \
            --output ./artifacts/linux-x64 \
            --verbosity minimal \
            -p:Version=${{ steps.version.outputs.version }} \
            -p:AssemblyVersion=${{ steps.version.outputs.version }}.0 \
            -p:FileVersion=${{ steps.version.outputs.version }}.0 \
            -p:PublishSingleFile=true \
            -p:DebugType=None \
            -p:DebugSymbols=false

      - name: Create archive
        run: |
          cd ./artifacts/linux-x64
          tar -czf ../../PgsToSrt-${{ steps.version.outputs.version }}-linux-x64.tar.gz .
          cd ../..
          ls -la PgsToSrt-${{ steps.version.outputs.version }}-linux-x64.tar.gz

      - name: Create checksums
        run: |
          sha256sum PgsToSrt-${{ steps.version.outputs.version }}-linux-x64.tar.gz > checksums.txt
          echo "Checksums created:"
          cat checksums.txt

      - name: Delete existing release assets (if any)
        continue-on-error: true
        run: |
          # Install jq if not available
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi
          
          echo "Checking for existing release: ${{ github.ref_name }}"
          
          # Get release info with better error handling
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}")
          
          RELEASE_ID=$(echo "$RELEASE_INFO" | jq -r '.id // empty')
          
          if [ ! -z "$RELEASE_ID" ] && [ "$RELEASE_ID" != "null" ] && [ "$RELEASE_ID" != "empty" ]; then
            echo "Found existing release with ID: $RELEASE_ID"
            
            # Get and delete existing assets with retry logic
            ASSETS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets")
            
            echo "Assets response: $ASSETS"
            
            echo "$ASSETS" | jq -r '.[].id // empty' | while read -r asset_id; do
              if [ ! -z "$asset_id" ] && [ "$asset_id" != "null" ] && [ "$asset_id" != "empty" ]; then
                echo "Deleting asset: $asset_id"
                curl -X DELETE -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  "https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id" || {
                  echo "Failed to delete asset $asset_id, continuing..."
                }
                sleep 1  # Small delay between deletions
              fi
            done
            
            echo "Waiting for asset deletions to propagate..."
            sleep 10  # Longer wait for GitHub API to sync
          else
            echo "No existing release found (ID: '$RELEASE_ID')"
          fi

      - name: Upload to release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            PgsToSrt-${{ steps.version.outputs.version }}-linux-x64.tar.gz
            checksums.txt
          fail_on_unmatched_files: true
          make_latest: true
          draft: false
          prerelease: false
          name: "PgsToSrt ${{ steps.version.outputs.version }}"
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}